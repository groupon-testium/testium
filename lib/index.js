// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var assert, async, cleanup, getBrowser, run, runTests, selenium, spawn, startSelenium;
  assert = require('assertive');
  async = require('async');
  spawn = require('child_process').spawn;
  selenium = require('./selenium');
  getBrowser = require('./test_setup/browser').getBrowser;
  runTests = function (options, callback) {
    var error, proc;
    if (null == options)
      options = {};
    proc = spawn('node', ['./test_runner/index.js'], {
      cwd: __dirname,
      stdio: [
        process.stdin,
        process.stdout,
        process.stderr,
        'ipc'
      ]
    });
    error = null;
    proc.on('error', function (err) {
      return error = err;
    });
    proc.on('exit', function (exitCode, interrupt) {
      if (interrupt === 'SIGSEGV' && !error)
        error = new Error(interrupt);
      return callback(error, exitCode);
    });
    return proc.send(options);
  };
  startSelenium = function (param$, callback) {
    var applicationPort, binPath, cache$, javaHeapSize, logDirectory, seleniumServer;
    {
      cache$ = param$;
      seleniumServer = cache$.seleniumServer;
      javaHeapSize = cache$.javaHeapSize;
      logDirectory = cache$.logDirectory;
      applicationPort = cache$.applicationPort;
    }
    if (seleniumServer) {
      return selenium.start(seleniumServer, javaHeapSize, logDirectory, applicationPort, callback);
    } else {
      binPath = '' + __dirname + '/../bin';
      return selenium.ensure(binPath, function (error) {
        if (null != error)
          return callback(error);
        return selenium.start(null, javaHeapSize, logDirectory, applicationPort, callback);
      });
    }
  };
  run = function (options, callback) {
    var invocation;
    if (null == options)
      options = {};
    invocation = 'run(options, callback)';
    assert.truthy('' + invocation + ' - requires options.applicationPort', options.applicationPort);
    assert.truthy('' + invocation + ' - requires options.tests', options.tests);
    assert.truthy('' + invocation + ' - requires callback', callback);
    return startSelenium(options, function (error, serverUrl) {
      if (null != error)
        return selenium.cleanup(function (cleanupError) {
          if (null != error)
            error;
          else
            error = cleanupError;
          if (null != error && null != cleanupError)
            error.inner = cleanupError;
          if (null != error)
            return callback(error);
        });
      options.seleniumServer = serverUrl;
      return runTests(options, function (error, failedTests) {
        return selenium.cleanup(function (cleanupError) {
          if (null != error)
            error;
          else
            error = cleanupError;
          if (null != error && null != cleanupError)
            error.inner = cleanupError;
          return callback(error, failedTests);
        });
      });
    });
  };
  cleanup = selenium.cleanup;
  module.exports = {
    run: run,
    cleanup: cleanup,
    getBrowser: getBrowser
  };
}.call(this);
